{
    "info": {
        "_postman_id": "c4d8f6a2-9b1e-4c7f-8e3a-5f2d1a8b6c9e",
        "name": "Contact API Tests",
        "description": "Test API contact với các scenarios khác nhau (data-driven)",
        "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
        "_exporter_id": "38685069"
    },
    "item": [
        {
            "name": "Send Contact Message (Data-driven)",
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "// Log để debug",
                            "console.log('Test Case:', pm.iterationData.get('test_description'));",
                            "console.log('Response Status:', pm.response.code);",
                            "console.log('Expected Status:', pm.iterationData.get('expected_status'));",
                            "",
                            "// Kiểm tra response có thể parse JSON không",
                            "let responseData;",
                            "let isJsonResponse = false;",
                            "try {",
                            "    responseData = pm.response.json();",
                            "    isJsonResponse = true;",
                            "} catch (e) {",
                            "    console.log('Response is not JSON:', e.message);",
                            "}",
                            "",
                            "// Test status codes theo thực tế API",
                            "pm.test('Response status is as expected', function () {",
                            "    const expectedStatus = Number(pm.iterationData.get('expected_status'));",
                            "    if (!isNaN(expectedStatus)) {",
                            "        pm.expect(pm.response.code).to.equal(expectedStatus);",
                            "    } else {",
                            "        // Nếu không có expected status, chấp nhận các status hợp lệ",
                            "        pm.expect(pm.response.code).to.be.oneOf([200, 201, 422, 500]);",
                            "    }",
                            "});",
                            "",
                            "// Nếu là JSON response, test structure",
                            "if (isJsonResponse && responseData) {",
                            "    pm.test('Response is valid JSON', function () {",
                            "        pm.expect(responseData).to.be.an('object');",
                            "    });",
                            "",
                            "    // Test cho 201 Created",
                            "    if (pm.response.code === 201) {",
                            "        pm.test('Success response has required fields', function () {",
                            "            pm.expect(responseData).to.have.property('id');",
                            "            pm.expect(responseData).to.have.property('first_name');",
                            "            pm.expect(responseData).to.have.property('last_name');",
                            "            pm.expect(responseData).to.have.property('email');",
                            "        });",
                            "        // Lưu message ID cho tests khác",
                            "        pm.environment.set('message_id', responseData.id);",
                            "    }",
                            "",
                            "    // Test cho 422 Validation Error",
                            "    else if (pm.response.code === 422) {",
                            "        pm.test('Validation error response structure', function () {",
                            "            // API trả về format: {\"field\":[\"error message\"]}",
                            "            pm.expect(responseData).to.be.an('object');",
                            "            const keys = Object.keys(responseData);",
                            "            pm.expect(keys.length).to.be.above(0);",
                            "            // Kiểm tra có ít nhất một field error",
                            "            const hasValidationErrors = keys.some(key => ",
                            "                Array.isArray(responseData[key]) && responseData[key].length > 0",
                            "            );",
                            "            pm.expect(hasValidationErrors).to.be.true;",
                            "        });",
                            "    }",
                            "",
                            "    // Test cho 500 Server Error (Bug in ContactService)",
                            "    else if (pm.response.code === 500) {",
                            "        pm.test('Server error response has details', function () {",
                            "            pm.expect(responseData).to.have.property('message');",
                            "            pm.expect(responseData).to.have.property('exception');",
                            "            pm.expect(responseData).to.have.property('file');",
                            "            pm.expect(responseData).to.have.property('line');",
                            "        });",
                            "",
                            "        pm.test('Server error occurs in ContactService', function () {",
                            "            pm.expect(responseData.file).to.include('ContactService.php');",
                            "            pm.expect(responseData.message).to.include('first_name');",
                            "        });",
                            "    }",
                            "}"
                        ],
                        "type": "text/javascript"
                    }
                }
            ],
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "Content-Type",
                        "value": "application/json"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\n  \"first_name\": \"{{first_name}}\",\n  \"last_name\": \"{{last_name}}\",\n  \"email\": \"{{email}}\",\n  \"subject\": \"{{subject}}\",\n  \"message\": \"{{message}}\"\n}"
                },
                "url": {
                    "raw": "{{base_url}}/messages",
                    "host": ["{{base_url}}"],
                    "path": ["messages"]
                }
            },
            "response": []
        },
        {
            "name": "Get All Contact Messages (Data-driven)",
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "// GET messages requires authentication - 401 is expected",
                            "pm.test('GET request authentication check', function () {",
                            "    pm.expect(pm.response.code).to.equal(401);",
                            "});",
                            "",
                            "pm.test('Unauthorized response has proper format', function () {",
                            "    try {",
                            "        const responseData = pm.response.json();",
                            "        pm.expect(responseData).to.be.an('object');",
                            "        pm.expect(responseData).to.have.property('message');",
                            "    } catch (e) {",
                            "        // If not JSON, that's also acceptable for 401",
                            "        pm.expect(pm.response.code).to.equal(401);",
                            "    }",
                            "});"
                        ],
                        "type": "text/javascript"
                    }
                }
            ],
            "request": {
                "method": "GET",
                "header": [
                    {
                        "key": "Authorization",
                        "value": "Bearer {{auth_token}}",
                        "description": "Admin token required to view all messages"
                    }
                ],
                "url": {
                    "raw": "{{base_url}}/messages",
                    "host": ["{{base_url}}"],
                    "path": ["messages"]
                }
            },
            "response": []
        },
        {
            "name": "Update Contact Message Status (Data-driven)",
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "// PUT without valid message_id and auth will return 404",
                            "pm.test('PUT request returns 404 (expected)', function () {",
                            "    pm.expect(pm.response.code).to.equal(404);",
                            "});",
                            "",
                            "pm.test('404 response format check', function () {",
                            "    try {",
                            "        const responseData = pm.response.json();",
                            "        pm.expect(responseData).to.be.an('object');",
                            "        pm.expect(responseData).to.have.property('message');",
                            "    } catch (e) {",
                            "        // If not JSON, 404 is still acceptable",
                            "        pm.expect(pm.response.code).to.equal(404);",
                            "    }",
                            "});"
                        ],
                        "type": "text/javascript"
                    }
                }
            ],
            "request": {
                "method": "PUT",
                "header": [
                    {
                        "key": "Content-Type",
                        "value": "application/json"
                    },
                    {
                        "key": "Authorization",
                        "value": "Bearer {{auth_token}}",
                        "description": "Admin token required to update message status"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\n  \"status\": \"{{new_status}}\"\n}"
                },
                "url": {
                    "raw": "{{base_url}}/messages/1/status",
                    "host": ["{{base_url}}"],
                    "path": ["messages", "1", "status"]
                }
            },
            "response": []
        }
    ],
    "variable": [
        {
            "key": "base_url",
            "value": "{{base_url}}"
        },
        {
            "key": "auth_token",
            "value": "{{auth_token}}"
        },
        {
            "key": "message_id",
            "value": "{{message_id}}"
        }
    ]
}
